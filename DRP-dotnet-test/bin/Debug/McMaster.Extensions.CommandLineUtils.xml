<?xml version="1.0"?>
<doc>
    <assembly>
        <name>McMaster.Extensions.CommandLineUtils</name>
    </assembly>
    <members>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext">
            <summary>
            Contains information about the execution context of the command-line application.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments">
            <summary>
            The arguments as provided in Program.Main.
            </summary>
            <remarks>
            Cannot be null.
            </remarks>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.WorkingDirectory">
            <summary>
            The current working directory. Defaults to <see cref="M:System.IO.Directory.GetCurrentDirectory" />
            </summary>
            <remarks>
            Cannot be null, and must be an absolute file path.
            </remarks>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Console">
            <summary>
            The console.
            </summary>
            <remarks>
            Cannot be null.
            </remarks>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor">
            <summary>
            Provides access to a command line application model.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor.GetModelType">
            <summary>
            Gets the type of the model.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor.GetModel">
            <summary>
            Gets the model.
            </summary>
            <returns>The model.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser">
            <summary>
            A parser that can convert string into an object.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.TargetType">
            <summary>
            Gets the Type that this value parser is defined for.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.Parse(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the raw string value.
            </summary>
            <param name="argName">The name of the argument this value will be bound to.</param>
            <param name="value">The raw string value to parse.</param>
            <param name="culture">The culture that should be used to parse values.</param>
            <returns>The parsed value object.</returns>
            <throws name="System.FormatException">When the value cannot be parsed.</throws>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1">
            <summary>
            A parser that can convert string into <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1.Parse(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the raw string value.
            </summary>
            <param name="argName">The name of the argument this value will be bound to.</param>
            <param name="value">The raw string value to parse.</param>
            <param name="culture">The culture that should be used to parse values.</param>
            <returns>The parsed value object.</returns>
            <throws name="System.FormatException">When the value cannot be parsed.</throws>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult">
            <summary>
            The result of parsing command line arguments.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.#ctor(McMaster.Extensions.CommandLineUtils.CommandLineApplication)">
            <summary>
            Initializes <see cref="T:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult"/>.
            </summary>
            <param name="selectedCommand">The command selected for execution.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.#ctor">
            <summary>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.#ctor(McMaster.Extensions.CommandLineUtils.CommandLineApplication)" />
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.SelectedCommand">
            <summary>
            The application or subcommand that matches the command line arguments.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider">
            <summary>
            A store of value parsers that are used to convert argument values from strings to types.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.ParseCulture">
            <summary>
            Gets or sets the CultureInfo which is used to convert argument values to types.
            </summary>
            <remarks>
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </remarks>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.GetParser(System.Type)">
            <summary>
            Returns a parser registered for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.GetParser``1">
            <summary>
            Returns a parser for the generic type T.
            </summary>
            <remarks>
            If parser is not registered, null is returned.
            </remarks>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.Add(McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser)">
            <summary>
            Add a new value parser to the provider.
            </summary>
            <param name="parser">An instance of the parser that is used to convert an argument from a string.</param>
            <exception cref="T:System.ArgumentException">
            A value parser with the same <see cref="P:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.TargetType"/> is already registered.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parser"/> is null.</exception>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.AddRange(System.Collections.Generic.IEnumerable{McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser})">
            <summary>
            Add collection of a new value parsers to the provider.
            </summary>
            <param name="parsers">The collection whose parsers should be added.</param>
            <exception cref="T:System.ArgumentException">
            A value parser with the same <see cref="P:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.TargetType"/> is already registered.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parsers"/> is null.</exception>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.AddOrReplace(McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser)">
            <summary>
            Add a new value parser to the provider, or if a value provider already exists for
            <see cref="P:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.TargetType"/> then replaces it with <paramref name="parser"/>.
            </summary>
            <param name="parser">An instance of the parser that is used to convert an argument from a string.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parser"/> is null.</exception>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType">
            <summary>
            Represents file path types.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType.Directory">
            <summary>
            A file path to a directory.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType.File">
            <summary>
            A file path to a file.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType.Any">
            <summary>
            Any type of filepath.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParser">
            <summary>
            Provides methods for creating <see cref="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1"/>
            boilerplate implementations.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParser.Create(System.Type,System.Func{System.String,System.String,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Creates an <see cref="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser"/> implementation for a type
            given a parsing function that receives an argument name, a value
            to parse and a culture to use for parsing.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParser.Create``1(System.Func{System.String,System.String,System.Globalization.CultureInfo,``0})">
            <summary>
            Creates an <see cref="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1"/> implementation given
            a parsing function that receives an argument name, a value to
            parse and a culture to use for parsing.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParser.Create``1(System.Func{System.String,System.Globalization.CultureInfo,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Creates an <see cref="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1"/> implementation given
            a parsing function that receives an argument name, a value to
            parse, a culture to use for parsing and returns a tuple whose
            first element indicates whether parsing was successful and
            second element is the parsed value.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParser.Create``1(System.Func{System.String,System.Globalization.CultureInfo,System.ValueTuple{System.Boolean,``0}},System.Func{System.String,System.String,System.FormatException})">
            <summary>
            Creates an <see cref="T:McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser`1"/> implementation given
            a parsing function that receives an argument name, a value to
            parse, a culture to use for parsing and returns a tuple whose
            first element indicates whether parsing was successful and
            second element is the parsed value. An additional parameter
            specifies a function that returns the <see cref="T:System.FormatException"/>
            to throw, given the argument name and value, when parsing is
            unsuccessful.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute">
            <summary>
            <para>
            Specifies a set of allowed values and a comparer used to determine if a value is in that set.
            </para>
            <para>
            By default, value comparison is case-sensitive. To ensure case matches exactly, set <see cref="P:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.IgnoreCase"/> to <c>false</c>.
            </para>
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute"/>.
            </summary>
            <param name="allowedValues"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.#ctor(System.StringComparison,System.String[])">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute"/>.
            </summary>
            <param name="comparer"></param>
            <param name="allowedValues"></param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.Comparer">
            <summary>
            The comparison method used.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.IgnoreCase">
            <summary>
            Comparison between values and allowed values should ignore case.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute">
            <summary>
            Represents one or many positional command line arguments.
            Arguments are parsed based the <see cref="P:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.Order"/> given.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />.
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />.
            </summary>
            <param name="order">The order</param>
            <param name="name">The name</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />.
            </summary>
            <param name="order">The order</param>
            <param name="name">The name</param>
            <param name="description">The description</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.Order">
            <summary>
            The order in which the argument is expected, relative to other arguments.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.Name">
            <summary>
            The name of the argument.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Name"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.ShowInHelpText">
            <summary>
            Determines if the argument appears in the generated help-text.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandArgument.ShowInHelpText"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ArgumentAttribute.Description">
            <summary>
            A description of the argument.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Description"/>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandAttribute">
            <summary>
            Represents a command line application using attributes to define options and arguments.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute"/>.
            </summary>
            <param name="name">The name of the command.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute"/>.
            </summary>
            <param name="names">The names of the command. The first name given is the primary name</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.Name">
            <summary>
            The name of the command line application. When this is a subcommand, it is the name of the word used to invoke the subcommand.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name" />
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.Names">
            <summary>
            THe names of the command. The first is the primary name. All other names are aliases.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.FullName">
            <summary>
            The full name of the command line application to show in help text.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName" />
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.Description">
            <summary>
            A description of the command.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.ShowInHelpText">
            <summary>
            Determines if this command appears in generated help text.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.ExtendedHelpText">
            <summary>
            Additional text that appears at the bottom of generated help text.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.ThrowOnUnexpectedArgument">
            <summary>
            <para>
            This property is obsolete and will be removed in a future version.
            The recommended replacement is <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.UnrecognizedArgumentHandling"/>.
            </para>
            <para>
            Throw when unexpected arguments are encountered.
            </para>
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.UnrecognizedArgumentHandling">
            <summary>
            Set the behavior for how to handle unrecognized arguments.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.AllowArgumentSeparator">
            <summary>
            Allow '--' to be used to stop parsing arguments.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.ResponseFileHandling">
            <summary>
            Treat arguments beginning as '@' as a response file.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.OptionsComparison">
            <summary>
            The way arguments and options are matched.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.ParseCulture">
            <summary>
            Specifies the culture used to convert values into types.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandAttribute.ClusterOptions">
             <summary>
             <para>
             One or more options of <see cref="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue"/>, followed by at most one option that takes values, should be accepted when grouped behind one '-' delimiter.
             </para>
             <para>
             When true, the following are equivalent.
            
             <code>
             -abcXyellow
             -abcX=yellow
             -abcX:yellow
             -abc -X=yellow
             -ab -cX=yellow
             -a -b -c -Xyellow
             -a -b -c -X yellow
             -a -b -c -X=yellow
             -a -b -c -X:yellow
             </code>
             </para>
             <para>
             This defaults to true unless an option with a short name of two or more characters is added.
             </para>
             </summary>
             <remarks>
             <seealso href="https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html"/>
             </remarks>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.DirectoryExistsAttribute">
            <summary>
            Specifies that the data must be an already existing directory, not a file.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.DirectoryExistsAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.FileExistsAttribute"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.DirectoryNotExistsAttribute">
            <summary>
            Specifies that the data must not be an already existing directory, not a file.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.DirectoryNotExistsAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.DirectoryNotExistsAttribute"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.FileExistsAttribute">
            <summary>
            Specifies that the data must be an already existing file, not a directory.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.FileExistsAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.FileExistsAttribute"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.FileNotExistsAttribute">
            <summary>
            Specifies that the data must not be an already existing file, not a directory.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.FileNotExistsAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.FileNotExistsAttribute"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.FileOrDirectoryExistsAttribute">
            <summary>
            Specifies that the data must be an already existing file or directory.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.FileOrDirectoryExistsAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.FileOrDirectoryExistsAttribute"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.FileOrDirectoryNotExistsAttribute">
            <summary>
            Specifies that the data must not be an already existing file or directory.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.FileOrDirectoryNotExistsAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.FileOrDirectoryNotExistsAttribute"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase">
            <summary>
            Base type for attributes that check for existing files or directories.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase.#ctor(McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase"/>.
            </summary>
            <param name="filePathType">Acceptable file path types</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.FilePathNotExistsAttributeBase">
            <summary>
            Base type for attributes that check for files or directories not existing.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.FilePathNotExistsAttributeBase.#ctor(McMaster.Extensions.CommandLineUtils.Abstractions.FilePathType)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.FilePathNotExistsAttributeBase"/>.
            </summary>
            <param name="filePathType">Acceptable file path types</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.FilePathNotExistsAttributeBase.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator">
            <summary>
            A validator that uses a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> to validate a command, command line option, or argument.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator"/>.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator.GetValidationResult(McMaster.Extensions.CommandLineUtils.CommandOption,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Gets the validation result for a command line option.
            </summary>
            <param name="option"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator.GetValidationResult(McMaster.Extensions.CommandLineUtils.CommandArgument,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Gets the validation result for a command line argument.
            </summary>
            <param name="argument"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator.GetValidationResult(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Checks whether the command is valid using any associated validation attributes.</summary>
            <param name="command">The command line application to validate</param>
            <param name="context">The context under which validation should be performed</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.DelegateValidator">
            <summary>
            Implements a validator with an anonymous function
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.DelegateValidator.#ctor(System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.DelegateValidator"/>.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder">
            <summary>
            Creates a collection of validators for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/>.
            </summary>
            <remarks>
            Custom validation extension methods that only apply to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/> should hang off this type.
            </remarks>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder.Use(McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator)">
            <summary>
            Use the given <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator"/>.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder`1">
            <summary>
            Creates a collection of validators for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1"/>.
            </summary>
            <remarks>
            Custom validation extension methods that only apply to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1"/> should hang off this type.
            </remarks>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator">
            <summary>
            Provides validation for a <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator.GetValidationResult(McMaster.Extensions.CommandLineUtils.CommandArgument,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the values specified for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Values"/>.
            </summary>
            <param name="argument">The argument.</param>
            <param name="context">The validation context.</param>
            <returns>The validation result. Returns <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if the values pass validation.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator">
            <summary>
            Provides validation on a command
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator.GetValidationResult(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates a command
            </summary>
            <param name="command">The command.</param>
            <param name="context">The validation context.</param>
            <returns>The validation result. Returns <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if the values pass validation.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder">
            <summary>
            Creates a collection of validators for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>.
            </summary>
            <remarks>
            Custom validation extension methods that only apply to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/> should hang off this type.
            </remarks>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder.Use(McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator)">
            <summary>
            Use the given <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator"/>.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder`1">
            <summary>
            Creates a collection of validators for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption`1"/>.
            </summary>
            <remarks>
            Custom validation extension methods that only apply to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption`1"/> should hang off this type.
            </remarks>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator">
            <summary>
            Provides validation for a <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator.GetValidationResult(McMaster.Extensions.CommandLineUtils.CommandOption,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the values specified for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Values"/>.
            </summary>
            <param name="option">The option.</param>
            <param name="context">The validation context.</param>
            <returns>The validation result. Returns <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if the values pass validation.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder">
            <summary>
            Creates a collection of validators.
            </summary>
            <remarks>
            Custom validation extension methods should hang off this type.
            </remarks>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder.Use(McMaster.Extensions.CommandLineUtils.Validation.IValidator)">
            <summary>
            Use the <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IValidator"/>.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder`1">
            <summary>
            Creates a collection of validators on <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption`1" /> or <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1" />
            </summary>
            <remarks>
            Custom validation extension methods should hang off this type.
            </remarks>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.IValidator">
            <summary>
            Provides validation for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/> and <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder">
            <summary>
            Default implementation of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder"/> and <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder.#ctor(McMaster.Extensions.CommandLineUtils.CommandArgument)">
            <summary>
            Creates a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder"/> for a given <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/>.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder.#ctor(McMaster.Extensions.CommandLineUtils.CommandOption)">
            <summary>
            Creates a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder"/> for a given <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder.Use(McMaster.Extensions.CommandLineUtils.Validation.IValidator)">
            <summary>
            Adds a validator to the argument or option.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder`1">
            <summary>
            Default implementation of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder`1"/> and <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder`1.#ctor(McMaster.Extensions.CommandLineUtils.CommandArgument{`0})">
            <summary>
            Creates a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder"/> for a given <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1"/>.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder`1.#ctor(McMaster.Extensions.CommandLineUtils.CommandOption{`0})">
            <summary>
            Creates a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder"/> for a given <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption`1"/>.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute">
            <summary>
            The option used to determine if help text should be displayed. This should only be used once per command line app.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/> with the template <c>-?|-h|--help</c>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>.
            </summary>
            <param name="template">The string template. <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Template"/>.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.Template">
            <summary>
            The option template. This is parsed into the short and long name.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute">
            <summary>
            Specifies that a value must be a legal file path.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.OptionAttribute">
            <summary>
            Represents one or many command line option that is identified by flag proceeded by '-' or '--'.
            Options are not positional. Compare to <see cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.OptionAttribute.#ctor">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.OptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>.
            </summary>
            <param name="template">The string template. <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Template"/>.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.OptionAttribute.#ctor(McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>.
            </summary>
            <param name="optionType">The optionType</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.OptionAttribute.#ctor(System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>.
            </summary>
            <param name="template">The template</param>
            <param name="optionType">The option type</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.OptionAttribute.#ctor(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>.
            </summary>
            <param name="template">The template</param>
            <param name="description">The option description</param>
            <param name="optionType">The option type</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttribute.OptionType">
            <summary>
            Defines the type of the option. When not set, this will be inferred from the CLR type of the property.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.OptionType"/>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.OptionAttributeBase">
            <summary>
            Common option properties.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.Template">
            <summary>
            The option template. This is parsed into the short and long name.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.ShortName">
            <summary>
            The short command line flag used to identify this option. On command line, this is preceeded by a single '-{ShortName}'.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.LongName">
            <summary>
            The long command line flag used to identify this option. On command line, this is preceeded by a double dash: '--{LongName}'.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.SymbolName">
            <summary>
            Can be used in addition to <see cref="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.ShortName"/> to add a single, non-English character.
            Example "-?".
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.ValueName">
            <summary>
            The name of value(s) shown in help text when OptionType is not <see cref="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.Description">
            <summary>
            A description of this option to show in generated help text.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Description"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.ShowInHelpText">
            <summary>
            Determines if this option should be shown in generated help text.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.ShowInHelpText"/>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.OptionAttributeBase.Inherited">
            <summary>
            Determines if subcommands added to <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands"/>
            should also have access to this option.
            </summary>
            <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Inherited"/>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.SubcommandAttribute">
            <summary>
            Represents a subcommand.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.#ctor(System.String,System.Type)">
            <summary>
            This constructor is obsolete. The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.#ctor(System.Type[])"/>.
            </summary>
            <param name="name">The name of the subcommand</param>
            <param name="commandType">The type of the subcommand.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.SubcommandAttribute" />.
            </summary>
            <param name="subcommands">The subcommand types.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.Types">
            <summary>
            The types of the subcommands.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.Name">
            <summary>
            This property is obsolete and will be removed in a future version.
            The recommended replacement is to use <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute"/> to set names for subcommands.
            <para>
            The name of the subcommand.
            </para>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.CommandType">
            <summary>
            This property is obsolete and will be replaced in a future version.
            The recommended replacement is <see cref="P:McMaster.Extensions.CommandLineUtils.SubcommandAttribute.Types"/>.
            <para>
            The type of the subcommand.
            </para>
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.SuppressDefaultHelpOptionAttribute">
            <summary>
            Suppress <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute">
            <summary>
            The option used to determine if version text should be displayed.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/> with the template <c>--version</c>.
            </summary>
            <param name="version">The version</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>.
            </summary>
            <param name="template">The string template that will be used for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Template"/>.</param>
            <param name="version">The version</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.Version">
            <summary>
            The version information to be shown. <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.Template">
            <summary>
            The option template. This is parsed into the short and long name.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute">
            <summary>
            The option used to determine if version info should be displayed.
            The value for the version information is provided by the properties or members specified.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute"/> with <c>--version</c> as the template.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute"/> with <c>--version</c> as the template.
            </summary>
            <param name="template">The version template.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.MemberName">
            <summary>
            The name of the property or method that returns short version information.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.Template">
            <summary>
            The option template. This is parsed into the short and long name.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandArgument">
            <summary>
            Represents one or many positional command line arguments.
            Arguments are parsed in the order in which <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments"/> lists them.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandArgument.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.ShowInHelpText">
            <summary>
            Determines if the argument appears in the generated help-text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Description">
            <summary>
            A description of the argument.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Values">
            <summary>
            All values specified, if any.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.MultipleValues">
            <summary>
            Allow multiple values.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Value">
            <summary>
            The first value from <see cref="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Values"/>, if any.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.Validators">
            <summary>
            A collection of validators that execute before invoking <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})"/>.
            When validation fails, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler"/> is invoked.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument.UnderlyingType">
            <summary>
            Defines the underlying type of the argument for the help-text-generator
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1">
            <summary>
            Represents one or many positional command line arguments.
            Arguments are parsed in the order in which <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments"/> lists them.
            The raw value must be parsable into type <typeparamref name="T" />.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandArgument`1.#ctor(McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser{`0})">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1" />
            </summary>
            <param name="valueParser">The value parser.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument`1.ParsedValue">
            <summary>
            The parsed value.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandArgument`1.ParsedValues">
            <summary>
            All parsed values;
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication">
            <summary>
            Describes a set of command line arguments, options, and execution behavior.
            <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/> can be nested to support subcommands.
            </summary>
            <summary>
            Describes a set of command line arguments, options, and execution behavior.
            <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/> can be nested to support subcommands.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </summary>
            <param name="console">The console implementation to use.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </summary>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </summary>
            <param name="helpTextGenerator">The help text generator to use.</param>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(System.Boolean)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is the parameterless constructor <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor" />
            and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UnrecognizedArgumentHandling"/>.
            See https://github.com/natemcmaster/CommandLineUtils/issues/339 for details.
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </para>
            </summary>
            <param name="throwOnUnexpectedArg">Initial value for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String)" />
            and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UnrecognizedArgumentHandling"/>.
            See https://github.com/natemcmaster/CommandLineUtils/issues/339 for details.
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </para>
            </summary>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
            <param name="throwOnUnexpectedArg">Initial value for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String)" />
            See https://github.com/natemcmaster/CommandLineUtils/issues/339 for details.
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </para>
            </summary>
            <param name="helpTextGenerator">The help text generator to use.</param>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
            <param name="throwOnUnexpectedArg">Initial value for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent">
            <summary>
            Defaults to null. A link to the parent command if this is instance is a subcommand.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator">
            <summary>
            The help text generator to use.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name">
            <summary>
            The short name of the command. When this is a subcommand, it is the name of the word used to invoke the subcommand.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName">
            <summary>
            The full name of the command to show in the help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description">
            <summary>
            A description of the command.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText">
            <summary>
            Determines if this command appears in generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText">
            <summary>
            Additional text that appears at the bottom of generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options">
            <summary>
            Available command-line options on this command. Use <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions"/> to get all available options, which may include inherited options.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText">
            <summary>
            Whether a Pager should be used to display help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names">
            <summary>
            All names by which the command can be referenced. This includes <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name"/> and an aliases added in <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp">
            <summary>
            The option used to determine if help text should be displayed. This is set by calling <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion">
            <summary>
            The options used to determine if the command version should be displayed. This is set by calling <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments">
            <summary>
            Required command-line arguments.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments">
            <summary>
            When initialized with <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/> to <c>false</c>, this will contain any unrecognized arguments.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument">
            <summary>
            <para>
            This property is obsolete and will be removed in a future version.
            The recommended replacement is <seealso cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UnrecognizedArgumentHandling"/>.
            </para>
            <para>
            Indicates whether the parser should throw an exception when it runs into an unexpected argument.
            If this field is set to false, the parser will stop parsing when it sees an unexpected argument, and all
            remaining arguments, including the first unexpected argument, will be stored in RemainingArguments property.
            </para>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UnrecognizedArgumentHandling">
            <summary>
            Configures what the parser should do when it runs into an unexpected argument.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation">
            <summary>
            True when <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp"/> or <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/> was matched.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke">
            <summary>
            <para>
            This property has been marked as obsolete and will be removed in a future version.
            The recommended replacement for setting this property is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})" />
            and for invoking this property is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String[])" />.
            See https://github.com/natemcmaster/CommandLineUtils/issues/275 for details.
            </para>
            <para>
            The action to call when this command is matched and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation"/> is <c>false</c>.
            </para>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter">
            <summary>
            The long-form of the version to display in generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter">
            <summary>
            The short-form of the version to display in generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands">
            <summary>
            Subcommands.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator">
            <summary>
            Determines if '--' can be used to separate known arguments and options from additional content passed to <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling">
            <summary>
            <para>
            When enabled, the parser will treat any arguments beginning with '@' as a file path to a response file.
            A response file contains additional arguments that will be treated as if they were passed in on the command line.
            </para>
            <para>
            Defaults to <see cref="F:McMaster.Extensions.CommandLineUtils.ResponseFileHandling.Disabled" />.
            </para>
            <para>
            Nested response false are not supported.
            </para>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison">
            <summary>
            The way arguments and options are matched.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions">
             <summary>
             <para>
             One or more options of <see cref="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue"/>, followed by at most one option that takes values, should be accepted when grouped behind one '-' delimiter.
             </para>
             <para>
             When true, the following are equivalent.
            
             <code>
             -abcXyellow
             -abcX=yellow
             -abcX:yellow
             -abc -X=yellow
             -ab -cX=yellow
             -a -b -c -Xyellow
             -a -b -c -X yellow
             -a -b -c -X=yellow
             -a -b -c -X:yellow
             </code>
             </para>
             <para>
             This defaults to true unless an option with a short name of two or more characters is added.
             </para>
             </summary>
             <remarks>
             <seealso href="https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html"/>
             </remarks>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionNameValueSeparators">
            <summary>
            Characters used to separate the option name from the value.
            <para>
            By default, allowed separators are ' ' (space), :, and =
            </para>
            </summary>
            <remarks>
            Space actually implies multiple spaces due to the way most operating system shells parse command
            line arguments before starting a new process.
            </remarks>
            <example>
            Given --name=value, = is the separator.
            </example>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers">
            <summary>
            Gets the default value parser provider.
            <para>
            The value parsers control how argument values are converted from strings to other types. Additional value
            parsers can be added so that domain specific types can converted. In-built value parsers can also be replaced
            for precise control of all type conversion.
            </para>
            <remarks>
            Value parsers are currently only used by the Attribute API.
            </remarks>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory">
            <summary>
            <para>
            Defines the working directory of the application. Defaults to <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </para>
            <para>
            This will be used as the base path for opening response files when <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling"/> is <c>true</c>.
            </para>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out">
            <summary>
            The writer used to display generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error">
            <summary>
            The writer used to display generated error messages.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions">
            <summary>
            Gets all command line options available to this command, including any inherited options.
            </summary>
            <returns>Command line options.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)">
            <summary>
            Add another name for the command.
            <para>
            Additional names can be shorter, longer, or alternative names by which a command may be invoked on the command line.
            </para>
            </summary>
            <param name="name">The name. Must not be null or empty.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand(McMaster.Extensions.CommandLineUtils.CommandLineApplication)">
            <summary>
            Add a subcommand
            </summary>
            <param name="subcommand"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication})">
            <summary>
            Adds a subcommand.
            </summary>
            <param name="name">The word used to invoke the subcommand.</param>
            <param name="configuration">A callback to configure the created subcommand.</param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication},System.Boolean)">
            <summary>
            <para>
            This method is obsolete and will be removed in a future version.
            The recommended replacement is to use<see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication})" />
            and set <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UnrecognizedArgumentHandling" />.
            </para>
            <para>
            Adds a subcommand.
            </para>
            </summary>
            <param name="name">The word used to invoke the subcommand.</param>
            <param name="configuration">A callback to configure the created subcommand.</param>
            <param name="throwOnUnexpectedArg"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command``1(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}})">
            <summary>
            Adds a subcommand with model of type <typeparamref name="TModel" />.
            </summary>
            <param name="name">The word used to invoke the subcommand.</param>
            <param name="configuration">A callback used to configure the subcommand object.</param>
            <typeparam name="TModel">The model type of the subcommand.</typeparam>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command``1(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}},System.Boolean)">
            <summary>
            <para>
            This method is obsolete and will be removed in a future version.
            The recommended replacement is to use<see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication})" />
            and set <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UnrecognizedArgumentHandling" />.
            </para>
            <para>
            Adds a subcommand with model of type <typeparamref name="TModel" />.
            </para>
            </summary>
            <param name="name">The word used to invoke the subcommand.</param>
            <param name="configuration">A callback used to configure the subcommand object.</param>
            <param name="throwOnUnexpectedArg"></param>
            <typeparam name="TModel">The model type of the subcommand.</typeparam>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Adds a command-line option.
            </summary>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)">
            <summary>
            Adds a command-line option.
            </summary>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})">
            <summary>
            Adds a command-line option.
            </summary>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)">
            <summary>
            Adds a command line option.
            </summary>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <param name="configuration"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)">
            <summary>
            Adds a command line option with values that should be parsable into <typeparamref name="T" />.
            </summary>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <param name="configuration"></param>
            <param name="inherited"></param>
            <typeparam name="T">The type of the values on the option</typeparam>
            <returns>The option</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Boolean)">
            <summary>
            Adds a command line argument
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="multipleValues"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)">
            <summary>
            Adds a command line argument.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="configuration"></param>
            <param name="multipleValues"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument``1(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)">
            <summary>
            Adds a command line argument with values that should be parsable into <typeparamref name="T" />.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="configuration"></param>
            <param name="multipleValues"></param>
            <typeparam name="T">The type of the values on the option</typeparam>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})">
            <summary>
            Defines a callback for when this command is invoked.
            </summary>
            <param name="invoke"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            <para>
            This method is obsolete and will be removed in a future version.
            The recommended alternative is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int32}})" />.
            See https://github.com/natemcmaster/CommandLineUtils/issues/275 for details.
            </para>
            <para>
            Defines an asynchronous callback.
            </para>
            </summary>
            <param name="invoke"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Defines an asynchronous callback.
            </summary>
            <param name="invoke"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete(System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult})">
            <summary>
            Adds an action to be invoked when all command line arguments have been parsed and validated.
            </summary>
            <param name="action">The action to be invoked</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])">
            <summary>
            Parses an array of strings, matching them against <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options"/>, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments"/>, and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands"/>.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns>The result of parsing.</returns>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage">
             <summary>
             When an invalid argument is given, make suggestions in the error message
             about similar, valid commands or options.
             <para>
             $ git pshu
             Specify --help for a list of available options and commands
             Unrecognized command or argument 'pshu'
            
             Did you mean this?
                 push
             </para>
             </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)">
            <summary>
            Handle the result of parsing command line arguments.
            </summary>
            <param name="parseResult">The parse result.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String[])">
            <summary>
            Parses an array of strings using <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])"/>.
            <para>
            If <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp"/> was matched, the generated help text is displayed in command line output.
            </para>
            <para>
            If <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/> was matched, the generated version info is displayed in command line output.
            </para>
            <para>
            If there were any validation errors produced from <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult"/>, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler"/> is invoked.
            </para>
            <para>
            If the parse result matches this command, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke"/> will be invoked.
            </para>
            </summary>
            <param name="args"></param>
            <returns>The return code from <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke"/>.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Parses an array of strings using <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])"/>.
            <para>
            If <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp"/> was matched, the generated help text is displayed in command line output.
            </para>
            <para>
            If <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/> was matched, the generated version info is displayed in command line output.
            </para>
            <para>
            If there were any validation errors produced from <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult"/>, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler"/> is invoked.
            </para>
            <para>
            If the parse result matches this command, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke"/> will be invoked.
            </para>
            </summary>
            <param name="args"></param>
            <param name="cancellationToken"></param>
            <returns>The return code from <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke"/>.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)">
            <summary>
            Helper method that adds a help option.
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String,System.Boolean)">
            <summary>
            Helper method that adds a help option.
            </summary>
            <param name="template"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.String,System.String)">
            <summary>
            Helper method that adds a version option from known versions strings.
            </summary>
            <param name="template"></param>
            <param name="shortFormVersion"></param>
            <param name="longFormVersion"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})">
            <summary>
            Helper method that adds a version option.
            </summary>
            <param name="template"></param>
            <param name="shortFormVersionGetter"></param>
            <param name="longFormVersionGetter"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint">
            <summary>
            Show short hint that reminds users to use help option.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp">
            <summary>
            Show full help.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp(System.Boolean)">
            <summary>
            Show full help.
            </summary>
            <param name="usePager">Use a console pager to display help text, if possible.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp(System.String)">
            <summary>
            This method has been marked as obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp" />.
            </summary>
            <param name="commandName">The subcommand for which to show help. Leave null to show for the current command.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText">
            <summary>
            Produces help text describing command usage.
            </summary>
            <returns>The help text.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText(System.String)">
            <summary>
            This method has been marked as obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText" />
            </summary>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion">
            <summary>
            Displays version information that includes <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName"/> and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText">
            <summary>
            Produces text describing version of the command.
            </summary>
            <returns>The version text.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion">
            <summary>
            Gets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName"/> and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion">
            <summary>
            Traverses up <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent"/> and displays the result of <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions">
            <summary>
            Gets a builder that can be used to apply conventions to
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose">
            <inheritdoc />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <see cref="P:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="context">The execution context.</param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <see cref="P:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="context">The execution context.</param>
            <param name="cancellationToken"></param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(System.String[])">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <paramref name="args"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="args">The arguments</param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <paramref name="args"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="console">The console to use</param>
            <param name="args">The arguments</param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(System.String[])">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <paramref name="args"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="args">The arguments</param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(System.String[],System.Threading.CancellationToken)">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <paramref name="args"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="args">The arguments</param>
            <param name="cancellationToken"></param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])">
            <summary>
            Creates an instance of <typeparamref name="TApp"/>, matching <paramref name="args"/>
            to all attributes on the type, and then invoking a method named "OnExecute" or "OnExecuteAsync" if it exists.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" />
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/>
            <param name="console">The console to use</param>
            <param name="args">The arguments</param>
            <typeparam name="TApp">A type that should be bound to the arguments.</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when attributes are incorrectly configured.</exception>
            <returns>The process exit code</returns>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler">
            <summary>
            The action to call when the command executes, but there was an error validation options or arguments.
            The action can return a new validation result.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators">
            <summary>
            A collection of validators that execute before invoking <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})"/>.
            When validation fails, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler"/> is invoked.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult">
            <summary>
            Validates arguments and options.
            </summary>
            <returns>The first validation result that is not <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if there is an error.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions">
            <summary>
            Helper methods for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)">
            <summary>
            Adds a command line argument with values that should be parsable into <typeparamref name="T" />.
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="multipleValues"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Adds a command-line option with values that should be parsable into <typeparamref name="T" />.
            </summary>
            <param name="app"></param>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)">
            <summary>
            Adds a command-line option with values that should be parsable into <typeparamref name="T" />.
            </summary>
            <param name="app"></param>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})">
            <summary>
            Adds a command-line option with values that should be parsable into <typeparamref name="T" />.
            </summary>
            <param name="app"></param>
            <param name="template"></param>
            <param name="description"></param>
            <param name="optionType"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)">
            <summary>
            Adds the help option with the template <c>-?|-h|--help</c>.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)">
            <summary>
            Adds the help option with the template <c>-?|-h|--help</c>.
            </summary>
            <param name="app"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)">
            <summary>
            Adds the verbose option with the template <c>-v|--verbose</c>.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)">
            <summary>
            Adds the verbose option with the template <c>-v|--verbose</c>.
            </summary>
            <param name="app"></param>
            <param name="template" />
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})">
            <summary>
            <para>
            This method is obsolete and will be removed in a future version.
            The recommended alternative is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecuteAsync(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />.
            See https://github.com/natemcmaster/CommandLineUtils/issues/275 for details.
            </para>
            <para>
            Sets an async handler with a return code of <c>0</c>.
            </para>
            </summary>
            <param name="app"></param>
            <param name="action">An asynchronous action to invoke when the ocmmand is selected..</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecuteAsync(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets an async handler with a return code of <c>0</c>.
            </summary>
            <param name="app"></param>
            <param name="action">An asynchronous action to invoke when the ocmmand is selected..</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke"/> with a return code of <c>0</c>.
            </summary>
            <param name="app"></param>
            <param name="action">An action to invoke when the command is selected.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})">
            <summary>
            Sets an action to invoke, but only when there is a validation error.
            </summary>
            <param name="app"></param>
            <param name="action"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Sets an action to invoke, but only when there is a validation error.
            </summary>
            <param name="app"></param>
            <param name="action"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)">
            <summary>
            Finds <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> on <paramref name="assembly"/> and uses that
            to set <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/>.
            <para>
            Uses the Version that is part of the <see cref="T:System.Reflection.AssemblyName"/> of the specified assembly
            if no <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> is applied.
            </para>
            </summary>
            <param name="app"></param>
            <param name="assembly"></param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="app"/> or <paramref name="assembly"/> is <c>null</c>.</exception>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.Reflection.Assembly)">
            <summary>
            Finds <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> on <paramref name="assembly"/> and uses that
            to set <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/>.
            <para>
            Uses the Version that is part of the <see cref="T:System.Reflection.AssemblyName"/> of the specified assembly
            if no <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> is applied.
            </para>
            </summary>
            <param name="app"></param>
            <param name="template"></param>
            <param name="assembly"></param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="app"/> or <paramref name="assembly"/> is <c>null</c>.</exception>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1">
            <summary>
            Describes a set of command line arguments, options, and execution behavior
            using a type of <typeparamref name="TModel" /> to model the application.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
            <param name="console">The console implementation to use.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String)" />
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </para>
            </summary>
            <param name="helpTextGenerator">The help text generator to use.</param>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(System.Boolean)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor" />.
            See https://github.com/natemcmaster/CommandLineUtils/issues/339 for details.
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </para>
            </summary>
            <param name="throwOnUnexpectedArg">Initial value for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String)" />
            See https://github.com/natemcmaster/CommandLineUtils/issues/339 for details.
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </para>
            </summary>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
            <param name="throwOnUnexpectedArg">Initial value for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)">
            <summary>
            <para>
            This constructor is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String)" />
            See https://github.com/natemcmaster/CommandLineUtils/issues/339 for details.
            </para>
            <para>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </para>
            </summary>
            <param name="helpTextGenerator">The help text generator to use.</param>
            <param name="console">The console implementation to use.</param>
            <param name="workingDirectory">The current working directory.</param>
            <param name="throwOnUnexpectedArg">Initial value for <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument"/>.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.Model">
            <summary>
            An instance of the model associated with the command line application.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.CreateModel">
            <summary>
             Create an instance of <typeparamref name="TModel" />.
            </summary>
            <returns>An instance of the context.</returns>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.ModelFactory">
            <summary>
            Defines the function that produces an instance of <typeparamref name="TModel" />.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)">
            <inheritdoc />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandOption">
            <summary>
            Represents one or many command line option that is identified by flag proceeded by '-' or '--'.
            Options are not positional. Compare to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandOption.#ctor(System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Initializes a new <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/>.
            </summary>
            <param name="template">The template string. This is parsed into <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.ShortName"/> and <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.LongName"/>.</param>
            <param name="optionType">The option type.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.Template">
            <summary>
            <para>
            This property is obsolete and will be removed in a future version.
            </para>
            <para>
            The argument template.
            </para>
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.ShortName">
            <summary>
            The short command line flag used to identify this option. On command line, this is preceeded by a single '-{ShortName}'.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.LongName">
            <summary>
            The long command line flag used to identify this option. On command line, this is preceeded by a double dash: '--{LongName}'.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.SymbolName">
            <summary>
            Can be used in addition to <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.ShortName"/> to add a single, non-English character.
            Example "-?".
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.ValueName">
            <summary>
            The name of value(s) shown in help text when <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.OptionType"/> is not <see cref="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.Description">
            <summary>
            A description of this option to show in generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.Values">
            <summary>
            Any values found during parsing, if any.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.OptionType">
            <summary>
            Defines the type of the option.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.ShowInHelpText">
            <summary>
            Determines if this option should be shown in generated help text.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.Inherited">
            <summary>
            Determines if subcommands added to <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands"/>
            should also have access to this option.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.UnderlyingType">
            <summary>
            Defines the underlying type of the option for the help-text-generator
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption.Validators">
            <summary>
            A collection of validators that execute before invoking <see cref="M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})"/>.
            When validation fails, <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler"/> is invoked.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandOption.TryParse(System.String)">
            <summary>
            Attempt to parse the value that follows after the flag.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandOption.HasValue">
            <summary>
            True when <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Values"/> is not empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandOption.Value">
            <summary>
            Returns the first element of <see cref="P:McMaster.Extensions.CommandLineUtils.CommandOption.Values"/>, if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandOption.ToTemplateString">
            <summary>
            Generates the template string in the format "-{Symbol}|-{Short}|--{Long} &lt;{Value}&gt;" for display in help text.
            </summary>
            <returns>The template string</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandOptionType">
            <summary>
            Defines the kinds of inputs <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/> accepts.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.MultipleValue">
            <summary>
            The option can be specified multiple times.
            <para>
            Example input: <c>--letter A --letter B --letter C</c>
            </para>
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.SingleValue">
            <summary>
            The option can only be specified once.
            <para>
            Example input: <c>--letter A</c>
            </para>
            <para>
            Example input: <c>--letter=A</c>
            </para>
            <para>
            Example input: <c>--letter:A</c>
            </para>
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.SingleOrNoValue">
            <summary>
            The option can only be specified once, and may or may not have a value.
            <para>
            To disambiguate this from <see cref="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue"/>, values provided cannot be space-separated from the option name,
            but must use '=' or ':'
            </para>
            <para>
            Example input: <c>--log</c>
            </para>
            <para>
            Example input: <c>--log:verbose</c>
            </para>
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue">
            <summary>
            The option can only be specified once, and does not have a value.
            <para>
            Example input: <c>--no-commit</c>
            </para>
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandOption`1">
            <summary>
            Represents one or many command line option that is identified by flag proceeded by '-' or '--'.
            Options are not positional. Compare to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument`1"/>. The raw value must be
            parsable into type <typeparamref name="T" />
            </summary>
            <typeparam name="T">The type of the option value(s)</typeparam>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandOption`1.#ctor(McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser{`0},System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)">
            <summary>
            Intializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption`1" />
            </summary>
            <param name="valueParser">The parser use to convert values into type of T.</param>
            <param name="template">The option tempalte.</param>
            <param name="optionType">The optiont type</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption`1.ParsedValue">
            <summary>
            The parsed value.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandOption`1.ParsedValues">
            <summary>
            All parsed values;
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.CommandParsingException">
            <summary>
            The exception that is thrown when command line arguments could not be parsed.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandParsingException.#ctor(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandParsingException"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.CommandParsingException.#ctor(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandParsingException"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.CommandParsingException.Command">
            <summary>
            The command that is throwing the exception.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.AppNameFromEntryAssemblyConvention">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name"/> using the name of the entry assembly
            to the current application. It is only applied if the name is null.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.AppNameFromEntryAssemblyConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.ArgumentAttributeConvention">
            <summary>
            Adds a <see cref="T:McMaster.Extensions.CommandLineUtils.CommandArgument"/> for each <see cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute"/>
            on the model type for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ArgumentAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.AttributeConvention">
            <summary>
            Searches the model type and its members for attributes that implement <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.IMemberConvention"/> or <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.IConvention"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.AttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.CommandAttributeConvention">
            <summary>
            Adds settings from <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute" /> and <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> set on the model type for <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1" />.
            </summary>
            <seealso cref="T:McMaster.Extensions.CommandLineUtils.Conventions.IConvention" />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.CommandAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <summary>
            Apply the convention.
            </summary>
            <param name="context">The context in which the convention is applied.</param>
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.CommandNameFromTypeConvention">
            <summary>
            Sets the command name based on the model type, if is not otherwise set.
            <para>
            This attempts to infer a command name using a few rules, such as using kebab-case
            and trimming "Command" from the name of the type.
            <example>AddCommand => "add"</example>
            <example>RemoveItemCommand => "remove-item"</example>
            </para>
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.CommandNameFromTypeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention">
            <summary>
            Uses an instance of <see cref="T:System.IServiceProvider" /> to call constructors
            when creating models.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention.#ctor">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention" />.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention.#ctor(System.IServiceProvider)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention" />.
            </summary>
            <param name="additionalServices">Additional services use to inject the constructor of the model</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext">
            <summary>
            The context in which a convention is applied.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext.#ctor(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Type)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext" />.
            </summary>
            <param name="application">The application</param>
            <param name="modelType">The type of the model.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext.Application">
            <summary>
            The application to which the convention is applied.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext.ModelType">
            <summary>
            The type of the application model. Can be null when applied to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication" />
            instead of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1" />.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext.ModelAccessor">
            <summary>
            A convenience accessor for getting the application model object.
            Can be null when applied to <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication" /> instead of
            <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1" />.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention">
            <summary>
            Adds a help option of --help if no other help option is specified.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention.DefaultHelpTemplate">
            <summary>
            The default help template.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention"/>.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.DefaultHelpOptionConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke"/> to call a method named
            <c>OnExecute</c> or <c>OnExecuteAsync</c> on the model type
            of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.HelpOptionAttributeConvention">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp"/> based on the usage of
            <see cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.HelpOptionAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.IConvention">
            <summary>
            Defines a convention for an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1" />.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.IConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <summary>
            Apply the convention.
            </summary>
            <param name="context">The context in which the convention is applied.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder">
            <summary>
            Builds a collection of conventions.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder.AddConvention(McMaster.Extensions.CommandLineUtils.Conventions.IConvention)">
            <summary>
            Add a convention that will be applied later.
            </summary>
            <param name="convention">The convention</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.IMemberConvention">
            <summary>
            Defines a convention that is implemented as an attribute on a model type.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.IMemberConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext,System.Reflection.MemberInfo)">
            <summary>
            Apply the convention given a property or method.
            </summary>
            <param name="context">The convention context.</param>
            <param name="member">A member of the model type to which the attribute is applied.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConvention">
            <summary>
            Adds an <see cref="T:McMaster.Extensions.CommandLineUtils.CommandOption"/> to match each usage of <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute"/>
            on the model type of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConventionBase`1">
            <summary>
            Shared implementation for adding conventions based on <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttributeBase"/>.
            </summary>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.ParentPropertyConvention">
            <summary>
            Sets a property named <c>Parent</c> on the model type to the value
            of the model of the parent command.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ParentPropertyConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.RemainingArgsPropertyConvention">
            <summary>
            Sets a property named <c>RemainingArguments</c> or <c>RemainingArgs</c>
            on the model type on <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>
            to the value of <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.RemainingArgsPropertyConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.SubcommandAttributeConvention">
            <summary>
            Creates a subcommand for each <see cref="T:McMaster.Extensions.CommandLineUtils.SubcommandAttribute"/>
            on the model type of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.SubcommandAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.SubcommandPropertyConvention">
            <summary>
            Sets a property named <c>Subcommand</c> to the value of the selected subcommand
            model type of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.SubcommandPropertyConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.ValidationErrorMethodConvention">
            <summary>
            Invokes a method named <c>OnValidationError</c> on the model type of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>
            to handle validation errors.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.ValidationErrorMethodConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionAttributeConvention">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/> using settings from
            <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute"/> on the model type of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionFromMemberAttributeConvention">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion"/> using settings from
            <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute"/> on the model type of <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionFromMemberAttributeConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions">
            <summary>
            Methods for adding commonly used conventions
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseDefaultConventions(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies a collection of default conventions, such as applying options in attributes
            on the model type,
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseDefaultHelpOption(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder,System.String)">
            <summary>
            Adds --help option, if there isn't already a help flag set.
            </summary>
            <param name="builder">The builder.</param>
            <param name="template">The help template. Defaults to <c>-?|-h|--help</c>.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseAttributes(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies a collection of default conventions, such as applying options in attributes
            on the model type,
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.SetRemainingArgsPropertyOnModel(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Sets a property named "RemainingArgs" or "RemainingArguments" on the model type to the value
            of <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments" />.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.SetSubcommandPropertyOnModel(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Sets a property named "Subcommand" on the model type to the value
            of the model of the selected subcommand.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.SetParentPropertyOnModel(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Sets a property named "Parent" on the model type to the value
            of the model of the parent command.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.SetAppNameFromEntryAssembly(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Sets <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name" /> to match the name of
            <see cref="M:System.Reflection.Assembly.GetEntryAssembly" />
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseCommandAttribute(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies settings from <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseVersionOptionFromMemberAttribute(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies settings from <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseVersionOptionAttribute(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies settings from <see cref="T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseHelpOptionAttribute(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies settings from <see cref="T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseOptionAttributes(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies settings from <see cref="T:McMaster.Extensions.CommandLineUtils.OptionAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseArgumentAttributes(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Applies settings from <see cref="T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseSubcommandAttributes(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Adds subcommands for each <see cref="T:McMaster.Extensions.CommandLineUtils.SubcommandAttribute" /> on the model type.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseOnValidateMethodFromModel(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Invokes a method named "OnValidate" on the model type after parsing.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseOnValidationErrorMethodFromModel(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Invokes a method named "OnValidationError" on the model type when validation fails.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseOnExecuteMethodFromModel(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Sets a method named "OnExecute" or "OnExecuteAsync" on the model type to handle
            <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke" />
            </summary>
            <param name="builder">The builder.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseConstructorInjection(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Enables using constructor injection to initialize the model type.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseConstructorInjection(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder,System.IServiceProvider)">
            <summary>
            Enables using constructor injection to initialize the model type.
            </summary>
            <param name="builder"></param>
            <param name="additionalServices">Additional services that should be passed to the service provider.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.UseCommandNameFromModelType(McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder)">
            <summary>
            Sets the subcommand name using the model type, if available and not otherwise set using <see cref="T:McMaster.Extensions.CommandLineUtils.CommandAttribute"/>.
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ValidateMethodConvention">
            <summary>
            Invokes a method named "OnValidate" on the model type after parsing.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidateMethodConvention.Apply(McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.MissingParameterlessConstructorException">
            <summary>
            The exception that is thrown when trying to instantiate a model with no parameterless constructor.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.MissingParameterlessConstructorException.Type">
            <summary>
            Gets the type that caused the exception.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.MissingParameterlessConstructorException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.MissingParameterlessConstructorException" />.
            </summary>
            <param name="type">The type missing a parameterless constructor.</param>
            <param name="innerException">The original exception.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException">
            <summary>
            The exception that is thrown when a subcommand cycle is detected
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException"/>.
            </summary>
            <param name="modelType">The type of the cycled command model</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Errors.SubcommandCycleException.ModelType">
            <summary>
            The type of the cycled command model
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException">
            <summary>
            The exception that is thrown when an invalid argument is given and when we can make suggestions
            about similar, valid commands or options.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException.#ctor(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException"/>.
            </summary>
            <param name="command"></param>
            <param name="nearestMatches">The options or commands that </param>
            <param name="message"></param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException.NearestMatches">
            <summary>
            A collection of strings representing suggestions about similar and valid commands or options for the invalid
            argument that caused this <see cref="T:McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException"/>.
            </summary>
            <remarks>
            This property always be empty <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage"/> is false.
            </remarks>
            <value>This property get/set the suggestions for an invalid argument.</value>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator">
            <summary>
            A default implementation of help text generation.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.ColumnSeparatorLength">
            <summary>
            The number of spaces between columns.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.IndentWriter">
            <summary>
            The hanging indent writer used for formatting indented and wrapped
            descriptions for options and arguments.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.Singleton">
            <summary>
            A singleton instance of <see cref="T:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator" />.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.SortCommandsByName">
            <summary>
            Determines if commands are ordered by name in generated help text
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.MaxLineLength">
            <summary>
            Override the console width disregarding any value from the executing environment.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.Generate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateHeader(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter)">
            <summary>
            Generate the first few lines of help output text
            </summary>
            <param name="application">The app</param>
            <param name="output">Help text output</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateBody(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter)">
            <summary>
            Generate detailed help information
            </summary>
            <param name="application">The application</param>
            <param name="output">Help text output</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateUsage(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter,System.Collections.Generic.IReadOnlyList{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Collections.Generic.IReadOnlyList{McMaster.Extensions.CommandLineUtils.CommandOption},System.Collections.Generic.IReadOnlyList{McMaster.Extensions.CommandLineUtils.CommandLineApplication})">
            <summary>
            Generate the line that shows usage
            </summary>
            <param name="application">The app</param>
            <param name="output">Help text output</param>
            <param name="visibleArguments">Arguments not hidden from help text</param>
            <param name="visibleOptions">Options not hidden from help text</param>
            <param name="visibleCommands">Commands not hidden from help text</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateArguments(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter,System.Collections.Generic.IReadOnlyList{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Int32)">
            <summary>
            Generate the lines that show information about arguments
            </summary>
            <param name="application">The app</param>
            <param name="output">Help text output</param>
            <param name="visibleArguments">Arguments not hidden from help text</param>
            <param name="firstColumnWidth">The width of the first column of commands, arguments, and options</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateOptions(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter,System.Collections.Generic.IReadOnlyList{McMaster.Extensions.CommandLineUtils.CommandOption},System.Int32)">
            <summary>
            Generate the lines that show information about options
            </summary>
            <param name="application">The app</param>
            <param name="output">Help text output</param>
            <param name="visibleOptions">Options not hidden from help text</param>
            <param name="firstColumnWidth">The width of the first column of commands, arguments, and options</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateCommands(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter,System.Collections.Generic.IReadOnlyList{McMaster.Extensions.CommandLineUtils.CommandLineApplication},System.Int32)">
            <summary>
            Generate the lines that show information about subcommands
            </summary>
            <param name="application">The app</param>
            <param name="output">Help text output</param>
            <param name="visibleCommands">Commands not hidden from help text</param>
            <param name="firstColumnWidth">The width of the first column of commands, arguments, and options</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.GenerateFooter(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter)">
            <summary>
            Generate the last lines of help text output
            </summary>
            <param name="application">The app</param>
            <param name="output">Help text output</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.Format(McMaster.Extensions.CommandLineUtils.CommandOption)">
            <summary>
            Generates the template string in the format "-{Symbol}|-{Short}|--{Long} &lt;{Value}&gt;" for display in help text.
            </summary>
            <returns>The template string</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.TryGetConsoleWidth">
            <summary>
            Get the Console width.
            </summary>
            <returns>BufferWidth or the default.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter">
            <summary>
            A formatter for creating nicely wrapped descriptions for display on the command line in the second column
            of generated help text.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.DefaultConsoleWidth">
            <summary>
            The default console width used for wrapping if the width cannot be gotten from the Console.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.#ctor(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            A description formatter for dynamically wrapping the description to print in a CLI usage.
            </summary>
            <param name="indentSize">The indent size in spaces to use.</param>
            <param name="maxLineLength">The max length an indented line can be.
            Defaults to <see cref="F:McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.DefaultConsoleWidth"/>.
            </param>
            <param name="indentFirstLine">If true, the first line of text will also be indented.</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.Write(System.String)">
            <summary>
            Dynamically wrap text between.
            </summary>
            <param name="input">The original description text.</param>
            <returns>Dynamically wrapped description with explicit newlines preserved.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.HangingIndentWriter.WrapSingle(System.String)">
            <summary>
            Wrap a single line based on console width.
            </summary>
            <param name="original">The original description text.</param>
            <returns>Description text wrapped with padded newlines.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator">
            <summary>
            Generates help text for a command line application.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator.Generate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.IO.TextWriter)">
            <summary>
            Generate help text for the application.
            </summary>
            <param name="application"></param>
            <param name="output"></param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ITupleValueParser">
            <summary>
            Parses a value to Tuple{bool,} or ValueTuple{bool,}
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ParserConfig">
            <summary>
            Configures the argument parser.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ParserConfig.OptionNameValueSeparators">
            <summary>
            Characters used to separate the option name from the value.
            <para>
            By default, allowed separators are ' ' (space), :, and =
            </para>
            </summary>
            <remarks>
            Space actually implies multiple spaces due to the way most operating system shells parse command
            line arguments before starting a new process.
            </remarks>
            <example>
            Given --name=value, = is the separator.
            </example>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ParserConfig.UnrecognizedArgumentHandling">
            <summary>
            Set the behavior for how to handle unrecognized arguments.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.StringDistance.LevenshteinDistance(System.String,System.String,System.Boolean)">
            <summary>
            Calculates the unnormalized (Damerau-)Levenshtein Distance of two strings
            </summary>
            <param name="s"></param>
            <param name="t"></param>
            <param name="damareu">Determites if the Damerau deviant is used</param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.StringDistance.LevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates the unnormalized Levenshtein Distance of two strings
            </summary>
            <param name="s"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.StringDistance.DamareuLevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates the unnormalized Damareu-Levenshtein Distance of two strings
            </summary>
            <param name="s"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.StringDistance.NormalizeDistance(System.Int32,System.Int32)">
            <summary>
            Normalizes the distance
            </summary>
            <param name="distance"></param>
            <param name="length"></param>
            <returns>A value from 0 to 1 with 1 being a perfect match and zero none at all</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.StringDistance.GetBestMatchesSorted(System.Func{System.String,System.String,System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            Gets a list of appropriate matches for <paramref name="value"/> in the given <paramref name="values"/>.
            Matches are sorted in ascending order, from the most likely match to less likely match using the <paramref name="distanceMethod"/>.
            The <paramref name="threshold"/> defines the minimum threshold for the string distance, below which words are not kept in the output list.
            </summary>
            <param name="distanceMethod">A method that calculates a string distance.</param>
            <param name="value">The value to compute the distance from.</param>
            <param name="values">The values to search through.</param>
            <param name="threshold">A threshold for word possible match.</param>
            <returns>The index of the best match or -1 when none is found</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.SuggestionCreator">
            <summary>
            Creates suggestions based on an input string and a command object.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.SuggestionCreator.GetTopSuggestions(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)">
            <summary>
            Gets a list of suggestions from sub commands and options of <paramref name="command"/> that are likely to
            fix the invalid argument <paramref name="input"/>
            </summary>
            <param name="command"></param>
            <param name="input"></param>
            <returns>A list of string with suggestions or null if no suggestions were found</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ConsoleExtensions">
            <summary>
            Helper methods for <see cref="T:McMaster.Extensions.CommandLineUtils.IConsole"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole)">
            <summary>
            Writes an empty line.
            </summary>
            <param name="console">The console.</param>
            <returns>the console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.String)">
            <summary>
            Writes a string followed by a line terminator.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>the console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object[])">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg">Argument used to format.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument to replace in the format string.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object,System.Object)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument to replace in the format string.</param>
            <param name="arg1">The second argument to replace in the format string.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument to replace in the format string.</param>
            <param name="arg1">The second argument to replace in the format string.</param>
            <param name="arg2">The third argument to replace in the format string.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.UInt64)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Boolean)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Char)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Char[])">
            <summary>
            Formats and writes an array of characters as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="buffer">The buffer.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Char[],System.Int32,System.Int32)">
            <summary>
            Formats and writes a portion of a character buffer as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="buffer">The buffer.</param>
            <param name="index">The start index.</param>
            <param name="count">The number of characters to write.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Decimal)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Double)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.UInt32)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Int32)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Object)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Single)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.WriteLine(McMaster.Extensions.CommandLineUtils.IConsole,System.Int64)">
            <summary>
            Formats and writes a value as a new line.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.String)">
            <summary>
            Writes a string console output.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>the console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object[])">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg">Argument used to format.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument to replace in the format string.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object,System.Object)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument to replace in the format string.</param>
            <param name="arg1">The second argument to replace in the format string.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="format">The format string.</param>
            <param name="arg0">The first argument to replace in the format string.</param>
            <param name="arg1">The second argument to replace in the format string.</param>
            <param name="arg2">The third argument to replace in the format string.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.UInt32)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Decimal)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Int32)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.UInt64)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Boolean)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Char)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Char[])">
            <summary>
            Formats and writes an array of characters.
            </summary>
            <param name="console">The console.</param>
            <param name="buffer">The buffer.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Char[],System.Int32,System.Int32)">
            <summary>
            Formats and writes a portion of a character buffer.
            </summary>
            <param name="console">The console.</param>
            <param name="buffer">The buffer.</param>
            <param name="index">The start index.</param>
            <param name="count">The number of characters to write.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Double)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Int64)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Object)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleExtensions.Write(McMaster.Extensions.CommandLineUtils.IConsole,System.Single)">
            <summary>
            Formats and writes a value.
            </summary>
            <param name="console">The console.</param>
            <param name="value">The value.</param>
            <returns>The console.</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ConsoleReporter">
            <summary>
            A thread-safe reporter that forwards to console output.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.ConsoleReporter"/>.
            </summary>
            <param name="console"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.Boolean,System.Boolean)">
            <summary>
            Initializes an instance of <see cref="T:McMaster.Extensions.CommandLineUtils.ConsoleReporter"/>.
            </summary>
            <param name="console"></param>
            <param name="verbose">When false, Verbose does not display output.</param>
            <param name="quiet">When true, only Warn and Error display output</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ConsoleReporter.Console">
            <summary>
            The console to write to.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ConsoleReporter.IsVerbose">
            <summary>
            Is verbose output displayed.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.ConsoleReporter.IsQuiet">
            <summary>
            Is verbose output and regular output hidden.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.WriteLine(System.IO.TextWriter,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Write a line with color.
            </summary>
            <param name="writer"></param>
            <param name="message"></param>
            <param name="foregroundColor"></param>
            <param name="backgroundColor"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.Error(System.String)">
            <summary>
            Writes a message in <see cref="F:System.ConsoleColor.Red"/> to <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.Error"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.Warn(System.String)">
            <summary>
            Writes a message in <see cref="F:System.ConsoleColor.Yellow"/> to <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.Out"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.Output(System.String)">
            <summary>
            Writes a message to <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.Out"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ConsoleReporter.Verbose(System.String)">
            <summary>
            Writes a message in <see cref="F:System.ConsoleColor.DarkGray"/> to <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.Out"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.IConsole">
            <summary>
            An abstract console.
            </summary>
        </member>
        <member name="E:McMaster.Extensions.CommandLineUtils.IConsole.CancelKeyPress">
            <summary>
            Raised when Ctrl+C is pressed.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.Out">
            <summary>
            stdout
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.Error">
            <summary>
            stderr
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.In">
            <summary>
            stdin
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.IsInputRedirected">
            <summary>
            Is stdin piped from somewhere?
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.IsOutputRedirected">
            <summary>
            Is stdout being piped to somewhere?
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.IsErrorRedirected">
            <summary>
            Is stderr being piped to somewhere?
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.ForegroundColor">
            <summary>
            The foreground color of output.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.IConsole.BackgroundColor">
            <summary>
            The background color of output.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.IConsole.ResetColor">
            <summary>
            Resets <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.ForegroundColor"/> and <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.BackgroundColor"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.IReporter">
            <summary>
            Gathers messages with levels.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.IReporter.Verbose(System.String)">
            <summary>
            Report a verbose message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.IReporter.Output(System.String)">
            <summary>
            Report console output.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.IReporter.Warn(System.String)">
            <summary>
            Report a warning.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.IReporter.Error(System.String)">
            <summary>
            Report an error.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.NullConsole">
            <summary>
            An implementation of <see cref="T:McMaster.Extensions.CommandLineUtils.IConsole"/> that does nothing.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.Singleton">
            <summary>
            A shared instance of <see cref="T:McMaster.Extensions.CommandLineUtils.NullConsole"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.Out">
            <summary>
            A writer that does nothing. 
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.Error">
            <summary>
            A writer that does nothing. 
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.In">
            <summary>
            An empty reader.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.IsInputRedirected">
            <summary>
            Always <c>false</c>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.IsOutputRedirected">
            <summary>
            Always <c>false</c>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.IsErrorRedirected">
            <summary>
            Always <c>false</c>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.ForegroundColor">
            <inheritdoc />
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullConsole.BackgroundColor">
            <inheritdoc />
        </member>
        <member name="E:McMaster.Extensions.CommandLineUtils.NullConsole.CancelKeyPress">
            <summary>
            This event never fires.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.NullConsole.ResetColor">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.NullReporter">
            <summary>
            A reporter that does nothing.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.NullReporter.Singleton">
            <summary>
            A shared instance of <see cref="T:McMaster.Extensions.CommandLineUtils.NullReporter"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.NullReporter.Verbose(System.String)">
            <inheritdoc />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.NullReporter.Output(System.String)">
            <inheritdoc />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.NullReporter.Warn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.NullReporter.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Pager">
            <summary>
            Process access to a console pager, which supports scrolling and search.
            <para>
            This is done by piping into `less` command (Linux/macOS only.)
            Windows is currently not supported.
            </para>
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Pager.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Pager" /> which displays output in a console pager.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Pager.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)">
            <summary>
            Initializes a new instance of <see cref="T:McMaster.Extensions.CommandLineUtils.Pager" /> which displays output in a console pager.
            </summary>
            <param name="console">The console to write to.</param>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Pager.Prompt">
            <summary>
            The prompt to display at the bottom of the pager.
            <seealso href="https://www.computerhope.com/unix/uless.htm#Prompts" /> for details.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.Pager.Writer">
            <summary>
            <para>
            Gets an object which can be used to write text into the pager.
            </para>
            <para>
            This fallsback to <see cref="P:McMaster.Extensions.CommandLineUtils.IConsole.Out" /> if the pager is not available.
            </para>
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Pager.WaitForExit">
            <summary>
            This will wait until the user exits the pager.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Pager.Kill">
            <summary>
            Force close the pager.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Pager.Dispose">
            <summary>
            This will wait until the user exits the pager.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.PhysicalConsole">
            <summary>
            An implementation of <see cref="T:McMaster.Extensions.CommandLineUtils.IConsole"/> that wraps <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.Singleton">
            <summary>
            A shared instance of <see cref="T:McMaster.Extensions.CommandLineUtils.PhysicalConsole"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.PhysicalConsole.#ctor">
            <summary>
            This API is obsolete and will be removed in a future version.
            The recommended replacement is <see cref="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.Singleton" />.
            </summary>
        </member>
        <member name="E:McMaster.Extensions.CommandLineUtils.PhysicalConsole.CancelKeyPress">
            <summary>
            <see cref="E:System.Console.CancelKeyPress"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.Error">
            <summary>
            <see cref="P:System.Console.Error"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.In">
            <summary>
            <see cref="P:System.Console.In"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.Out">
            <summary>
            <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.IsInputRedirected">
            <summary>
            <see cref="P:System.Console.IsInputRedirected"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.IsOutputRedirected">
            <summary>
            <see cref="P:System.Console.IsOutputRedirected"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.IsErrorRedirected">
            <summary>
            <see cref="P:System.Console.IsErrorRedirected"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.ForegroundColor">
            <summary>
            <see cref="P:System.Console.ForegroundColor"/>.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.PhysicalConsole.BackgroundColor">
            <summary>
            <see cref="P:System.Console.BackgroundColor"/>.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.PhysicalConsole.ResetColor">
            <summary>
            <see cref="M:System.Console.ResetColor"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ResponseFileHandling">
            <summary>
            <para>
            Specifies options for how to handle response files. The parser treats arguments beginning with '@' as a file path to a response file.
            </para>
            <para>
            A response file contains additional arguments that will be treated as if they were passed in on the command line.
            Response files can have comments that begin with the # symbol.
            You cannot use the backslash character (\) to concatenate lines.
            </para>
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.ResponseFileHandling.Disabled">
            <summary>
            Do not parse response files or treat arguments with '@' as a response file
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.ResponseFileHandling.ParseArgsAsSpaceSeparated">
            <summary>
            <para>
            Multiple arguments may appear on one line. Arguments are separate by spaces.
            </para>
            <para>
            Double and single quotes can be used to wrap arguments containing spaces.
            </para>
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.ResponseFileHandling.ParseArgsAsLineSeparated">
            <summary>
            <para>
            Each line in the file is treated as an argument, regardless of whitespace on the line.
            </para>
            <para>
            Lines beginning with # are skipped.
            </para>
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.UnrecognizedArgumentHandling">
            <summary>
            Defines behaviors for for how unrecognized arguments should be handled.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.UnrecognizedArgumentHandling.Throw">
            <summary>
            When an unrecognized argument is encountered, throw <see cref="T:McMaster.Extensions.CommandLineUtils.CommandParsingException"/>.
            </summary>
        </member>
        <member name="F:McMaster.Extensions.CommandLineUtils.UnrecognizedArgumentHandling.StopParsingAndCollect">
            <summary>
            When an unrecognized argument is encountered, stop parsing arguments and put all remaining arguments,
            including the first unrecognized argument, in <see cref="P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments"/>.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ArgumentEscaper">
            <summary>
            A utility for escaping arguments for new processes.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ArgumentEscaper.EscapeAndConcatenate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Undo the processing which took place to create string[] args in Main, so that the next process will
            receive the same string[] args.
            </summary>
            <remarks>
            See https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/
            </remarks>
            <param name="args">The arguments</param>
            <returns>A single string of escaped arguments</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.DebugHelper">
            <summary>
            Helps handle debug command-line arguments.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.DebugHelper.HandleDebugSwitch(System.String[]@)">
            <summary>
            Pauses the application until the debugger is attached when '--debug' is passed in as the first argument.
            <para>
            The pause times out at 30 seconds and continues execution.
            </para>
            </summary>
            <param name="args">The command line arguments</param>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.DebugHelper.HandleDebugSwitch(System.String[]@,System.Int32)">
            <summary>
            Pauses the application until the debugger is attached when '--debug' is passed in as the first argument,
            with a maximum wait time in seconds.
            </summary>
            <param name="args">The command line arguments</param>
            <param name="maxWaitSeconds">Maximum number of seconds to wait. Set to 0 or less for infinite waiting.</param>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.DotNetCliContext">
            <summary>
            APIs related to .NET Core CLI.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.DotNetCliContext.IsGlobalVerbose">
            <summary>
            `dotnet --diagnostics` was specified.
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.DotNetExe">
            <summary>
            Utilities for finding the "dotnet.exe" file from the currently running .NET Core application.
            </summary>
        </member>
        <member name="P:McMaster.Extensions.CommandLineUtils.DotNetExe.FullPath">
            <summary>
            The full filepath to the .NET Core CLI executable.
            <para>
            May be <c>null</c> if the CLI cannot be found.
            </para>
            </summary>
            <returns>The path or null</returns>
            <seealso cref="M:McMaster.Extensions.CommandLineUtils.DotNetExe.FullPathOrDefault" />
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.DotNetExe.FullPathOrDefault">
            <summary>
            Finds the full filepath to the .NET Core CLI executable,
            or returns a string containing the default name of the .NET Core muxer ('dotnet').
            <returns>The path or a string named 'dotnet'</returns>
            </summary>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.Prompt">
            <summary>
            Utilities for getting input from an interactive console.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Prompt.GetYesNo(System.String,System.Boolean,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Gets a yes/no response from the console after displaying a <paramref name="prompt" />.
            <para>
            The parsing is case insensitive. Valid responses include: yes, no, y, n.
            </para>
            </summary>
            <param name="prompt">The question to display on the command line</param>
            <param name="defaultAnswer">If the user provides an empty response, which value should be returned</param>
            <param name="promptColor">The console color to display</param>
            <param name="promptBgColor">The console background color for the prompt</param>
            <returns>True is 'yes'</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Prompt.GetString(System.String,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Gets a console response from the console after displaying a <paramref name="prompt" />.
            </summary>
            <param name="prompt">The question to display on command line</param>
            <param name="defaultValue">If the user enters a blank response, return this value instead.</param>
            <param name="promptColor">The console color to use for the prompt</param>
            <param name="promptBgColor">The console background color for the prompt</param>
            <returns>The response the user gave. Can be null or empty</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Prompt.GetPassword(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Gets a response that contains a password. Input is masked with an asterisk.
            </summary>
            <param name="prompt">The question to display on command line</param>
            <param name="promptColor">The console color to use for the prompt</param>
            <param name="promptBgColor">The console background color for the prompt</param>
            <returns>The password as plaintext. Can be null or empty.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Prompt.GetPasswordAsSecureString(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Gets a response as a SecureString object. Input is masked with an asterisk.
            </summary>
            <param name="prompt">The question to display on the command line</param>
            <param name="promptColor">The console color to use for the prompt</param>
            <param name="promptBgColor">The console background color for the prompt</param>
            <returns>A finalized SecureString object, may be empty.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Prompt.ReadObfuscatedLine(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Base implementation of GetPassword and GetPasswordAsString. Prompts the user for
            a password and yields each key as the user inputs. Password is masked as input. Pressing Escape will reset the password
            by flushing the stream with backspace keys.
            </summary>
            <param name="prompt">The question to display on the command line</param>
            <param name="promptColor">The console color to use for the prompt</param>
            <param name="promptBgColor">The console background color for the prompt</param>
            <returns>A stream of characters as input by the user including Backspace for deletions.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.Prompt.GetInt(System.String,System.Nullable{System.Int32},System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Gets an integer response from the console after displaying a <paramref name="prompt" />.
            </summary>
            <param name="prompt">The question to display on the command line</param>
            <param name="defaultAnswer">If the user provides an empty response, which value should be returned</param>
            <param name="promptColor">The console color to display</param>
            <param name="promptBgColor">The console background color for the prompt</param>
            <returns>The response as a number</returns>
        </member>
        <member name="T:McMaster.Extensions.CommandLineUtils.ValidationExtensions">
            <summary>
            Extension methods for adding validation rules to options and arguments.
            </summary>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.IsRequired(McMaster.Extensions.CommandLineUtils.CommandOption,System.Boolean,System.String)">
            <summary>
            Indicates the option is required.
            </summary>
            <param name="option">The option.</param>
            <param name="allowEmptyStrings">Indicates whether an empty string is allowed.</param>
            <param name="errorMessage">The custom error message to display. See also: <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage"/>.</param>
            <returns>The option.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.IsRequired``1(McMaster.Extensions.CommandLineUtils.CommandOption{``0},System.Boolean,System.String)">
            <summary>
            Indicates the option is required.
            </summary>
            <param name="option">The option.</param>
            <param name="allowEmptyStrings">Indicates whether an empty string is allowed.</param>
            <param name="errorMessage">The custom error message to display. See also: <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage"/>.</param>
            <returns>The option.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.IsRequired(McMaster.Extensions.CommandLineUtils.CommandArgument,System.Boolean,System.String)">
            <summary>
            Indicates the argument is required.
            </summary>
            <param name="argument">The argument.</param>
            <param name="allowEmptyStrings">Indicates whether an empty string is allowed.</param>
            <param name="errorMessage">The custom error message to display. See also: <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage"/>.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.IsRequired``1(McMaster.Extensions.CommandLineUtils.CommandArgument{``0},System.Boolean,System.String)">
            <summary>
            Indicates the argument is required.
            </summary>
            <param name="argument">The argument.</param>
            <param name="allowEmptyStrings">Indicates whether an empty string is allowed.</param>
            <param name="errorMessage">The custom error message to display. See also: <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage"/>.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts(McMaster.Extensions.CommandLineUtils.CommandOption,System.Action{McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder})">
            <summary>
            Specifies a set of rules used to determine if input is valid.
            </summary>
            <param name="option">The option.</param>
            <param name="configure">A function to configure rules on the validation builder.</param>
            <returns>The option.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts(McMaster.Extensions.CommandLineUtils.CommandArgument,System.Action{McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder})">
            <summary>
            Specifies a set of rules used to determine if input is valid.
            </summary>
            <param name="argument">The argument.</param>
            <param name="configure">A function to configure rules on the validation builder.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts(McMaster.Extensions.CommandLineUtils.CommandOption)">
            <summary>
            Creates a builder for specifying a set of rules used to determine if input is valid.
            </summary>
            <param name="option">The option.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts(McMaster.Extensions.CommandLineUtils.CommandArgument)">
            <summary>
            Creates a builder for specifying a set of rules used to determine if input is valid.
            </summary>
            <param name="argument">The argument.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts``1(McMaster.Extensions.CommandLineUtils.CommandOption{``0},System.Action{McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder{``0}})">
            <summary>
            Specifies a set of rules used to determine if input is valid.
            </summary>
            <param name="option">The option.</param>
            <param name="configure">A function to configure rules on the validation builder.</param>
            <returns>The option.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts``1(McMaster.Extensions.CommandLineUtils.CommandArgument{``0},System.Action{McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder{``0}})">
            <summary>
            Specifies a set of rules used to determine if input is valid.
            </summary>
            <param name="argument">The argument.</param>
            <param name="configure">A function to configure rules on the validation builder.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts``1(McMaster.Extensions.CommandLineUtils.CommandOption{``0})">
            <summary>
            Creates a builder for specifying a set of rules used to determine if input is valid.
            </summary>
            <param name="option">The option.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Accepts``1(McMaster.Extensions.CommandLineUtils.CommandArgument{``0})">
            <summary>
            Creates a builder for specifying a set of rules used to determine if input is valid.
            </summary>
            <param name="argument">The argument.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Enum``1(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.Boolean)">
            <summary>
            <para>
            Specifies that values must be one of the values in a given set.
            </para>
            <para>
            By default, value comparison is case-sensitive. To make matches case-insensitive, set <paramref name="ignoreCase"/> to <c>true</c>.
            </para>
            </summary>
            <param name="builder">The builder.</param>
            <param name="ignoreCase">Ignore case when parsing enums.</param>
            <exception cref="T:System.ArgumentException">When <typeparamref name="TEnum"/> is not an enum.</exception>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Values(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String[])">
            <summary>
            <para>
            Specifies that values must be one of the values in a given set.
            </para>
            <para>
            By default, value comparison is case-sensitive. To make matches case-insensitive, use <see cref="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Values(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.Boolean,System.String[])"/>.
            </para>
            </summary>
            <param name="builder">The builder.</param>
            <param name="allowedValues">Allowed values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Values(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.Boolean,System.String[])">
            <summary>
            Specifies that values must be one of the values in a given set.
            </summary>
            <param name="builder">The builder.</param>
            <param name="ignoreCase">Ignore case when comparing inputs to <paramref name="allowedValues"/>.</param>
            <param name="allowedValues">Allowed values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Values(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.StringComparison,System.String[])">
            <summary>
            Specifies that values must be one of the values in a given set.
            </summary>
            <param name="builder">The builder.</param>
            <param name="comparer">The comparer used to determine if values match.</param>
            <param name="allowedValues">Allowed values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.EmailAddress(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a valid email address.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.ExistingFile(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a path to a file that already exists.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.NonExistingFile(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a path to a file that does not already exist.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.ExistingDirectory(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a path to a directory that already exists.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.NonExistingDirectory(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a path to a directory that does not already exist.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.ExistingFileOrDirectory(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a valid file path or directory, and the file path must already exist.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.NonExistingFileOrDirectory(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be a valid file path or directory, and the file path must not already exist.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.LegalFilePath(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String)">
            <summary>
            Specifies that values must be legal file paths.
            </summary>
            <param name="builder">The builder.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.MinLength(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.Int32,System.String)">
            <summary>
            Specifies that values must be a string at least <paramref name="length"/> characters long.
            </summary>
            <param name="builder">The builder</param>
            <param name="length">The minimum length.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.MaxLength(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.Int32,System.String)">
            <summary>
            Specifies that values must be a string no more than <paramref name="length"/> characters long.
            </summary>
            <param name="builder">The builder.</param>
            <param name="length">The maximum length.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.RegularExpression(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String,System.String)">
            <summary>
            Specifies that values must match a regular expression.
            </summary>
            <param name="builder">The builder.</param>
            <param name="pattern">The regular expression.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Satisfies``1(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder,System.String,System.Object[])">
            <summary>
            Specifies that values must satisfy the requirements of the validation attribute of type <typeparamref name="TAttribute"/>.
            </summary>
            <typeparam name="TAttribute">The validation attribute type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="ctorArgs">Constructor arguments for <typeparamref name="TAttribute"/>.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Range(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Specifies that values must be in a given range.
            </summary>
            <param name="builder">The builder.</param>
            <param name="minimum">The minimum allowed value.</param>
            <param name="maximum">The maximum allowed value.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.Range(McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Specifies that values must be in a given range.
            </summary>
            <param name="builder">The builder.</param>
            <param name="minimum">The minimum allowed value.</param>
            <param name="maximum">The maximum allowed value.</param>
            <param name="errorMessage">A custom error message to display.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Adds a validator that runs after parsing is complete and before command execution.
            </summary>
            <param name="command">The command.</param>
            <param name="validate">The callback. Return <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if there is no error.</param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandArgument,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Adds a validator that runs after parsing is complete and before command execution.
            </summary>
            <param name="argument">The argument.</param>
            <param name="validate">The callback. Return <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if there is no error.</param>
            <returns></returns>
        </member>
        <member name="M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandOption,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Adds a validator that runs after parsing is complete and before command execution.
            </summary>
            <param name="option">The option.</param>
            <param name="validate">The callback. Return <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if there is no error.</param>
            <returns></returns>
        </member>
    </members>
</doc>
